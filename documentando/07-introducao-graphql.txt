01) O QUE ELE E:

    GRAPHQL ´E UMA LINGUAGEM DE CONSULTA DE DADOS DESENVOLVIDA E
    USADA PELO FACEBOOK PARA REALIZAR REQUISICOES E ENTREGAR
    INFORMACOES PARA APLICACOES WEB E MOBILE DESDE 2012.

02) COMO FUNCIONAVA UMA REQUISICAO DE DADOS(REST API):

    DE UM LADO TEMOS O CLIENT ONDE O FRONT REALIZA UMA CHAMADA(REQ) PARA O SERVER. 

    AO RECEBER ESSA CHAMADA, 
    O SERVIDOR IRA DEVOLVER OS DADOS REQUISITADOS ATRAVES DE UM RESPONSE.

    ESSE CONJUNTO DE DADOS GERALMENTE VEM NO FORMATO JSON, 
    E NO FRONTEND TRATAMOS ESSES DADOS EM JSON PARA EXIBIRMOS CONFORME DESEJARMOS. 

03) COMO A REQUISICAO ´E FEITA?

    A REQUISICAO ´E FEITA ACESSANDO UMA ROTA, A QUAL DENOMINAMOS ENDPOINT, 
    POR EXEMPLO: "/API/BOOKS/:ID"

04) QUAL O PROBLEMA DO REST?

    AO CRIARMOS NOVAS FEATURES PARA AS APIS, 
    OBRIGATORIAMENTE PRECISAMOS GERAR NOVAS VERSOES DELA, 
    CASO CONTRARIO OS SISTEMAS QUE UTILIZAM O FORMATO ANTIGO IRAO QUEBRAR. 

    OU SEJA, 
    CONFORME NOVAS FEATURES SAO IMPLEMENTADAS, 
    NOVAS VERSOES VAO SENDO CRIADAS, 
    O QUE ´E EXTREMAMENTE TRABALHOSO E REPETITIVO. 

    ALEM DESSE PROBLEMA, 
    TAMBEM TEMOS OUTRO A SER DESTACADO.
    QUANDO FAZEMOS UMA REQUISICAO ATRAVES DE UM CLIENT, 
    TODAS AS INFORMACOES DE UMA REST API SAO ENVIADAS NO RESPONSE, 
    MESMO QUE NAO ESTEJAMOS QUERENDO UTILIZAR QUASE NADA DO QUE ESTA SENDO RECEBIDO. 

    E COMO SE NAO BASTASSE, 
    AINDA EXISTE OUTRA PEDRA NO SAPATO, 
    POIS AS ROTAS DE REST APIS SAO ALTAMENTE ACOPLADAS. 
    ISSO SIGNIFICA QUE SE PRECISARMOS PEGAR INFORMACOES DE LIVROS, 
    IREMOS ACESSAR UMA ROTA DE LIVROS. 
    SE PRECISARMOS BUSCAR INFORMACOES DO AUTOR DO LIVRO, 
    IREMOS RECORRER A UMA ROTA SEPARADA.
    OU SEJA, SE QUISERMOS 2 OU MAIS DADOS DIFERENTES, 
    TEREMOS QUE CHAMAR DIVERSAS ROTAS, 
    CARREGANDO MUITOS DADOS E CAUSANDO UMA PERFORMANCE PESSIMA PARA O USUARIO. 

05) O GRAPHQL VEIO PARA TENTAR RESOLVER OS PROBLEMAS RECEM MENCIONADOS. 

    COMO ELE FUNCIONA?

    NO GRAPHQL NOS PREPARAMOS UM SCHEMA, 
    ONDE DEFINIREMOS O TIPO DO CONTEUDO E OS DADOS DELE,
    COMO POR EXEMPLO

    type Book {
      id: ID
      title: String
      published: Date
      price: String
      author: Author
    }

    type Author {
      id: ID, 
      firstName: String
      lastName: String
      books: [Book]
    }

    BUSCANDO DADOS DESEJADOS:

    {
      book(id: "1") {
        title
        author {
          firstName
        }
      }
    }

    RECEBENDO DADOS:

    {
      "title": "Black Hole Blues",
      "author: {
        "firstName": "Janna",
      }
    }

06) VANTAGENS GRAPHQL:

    PERMITE A EVOLUCAO CONSTANTE DA API.

    ENTREGA SOMENTE OS DADOS QUE FOREM REQUISITADOS.

    ROTA UNICA, DADOS ALTAMENTE DESACOPLADOS. 

    